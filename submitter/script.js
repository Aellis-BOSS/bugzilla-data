'use strict';

// The OAuth token was generated by boss-robot with the public_repo
// scope. It's used to boost the request rate limit from 60/hour to
// 5000/hour.
var gh = new Octokit({token: "8ed50783e7dd02093cf43293f3c7f85386fb576a"});

var repos = {
    'TES IV: Oblivion': {
        owner: 'boss-developers',
        repo: 'oblivion',
        xmlFile: 'boss_tes4.xml'
    },
    'TES V: Skyrim': {
        owner: 'boss-developers',
        repo: 'skyrim',
        xmlFile: 'boss_tes5.xml'
    },
    'Fallout 3': {
        owner: 'boss-developers',
        repo: 'fallout3',
        xmlFile: 'boss_fallout3.xml'
    },
    'Fallout: New Vegas': {
        owner: 'boss-developers',
        repo: 'falloutnv',
        xmlFile: 'boss_falloutnv.xml'
    },
    'Morrowind': {
        owner: 'boss-developers',
        repo: 'issue-conversion-test',
        xmlFile: 'boss_tes3.xml'
    },
};
var keywords = [
    'CRC',
    'incompatib',
    'load',
    'require',
    'http',
    /\.es(p|m)/i,
];
var blacklist = [
    'has been marked as a duplicate of this bug. ***',
    'C:\\',
    'F:/',
    /\.(de|ru|com|org)\/?$/i,
    'http://better-oblivion-sorting-software',
    'http://creativecommons.org'
];

var gameName = 'Morrowind';
function handleError(err) {
    /* err has members '_jqXHR' (an XHR object), 'status' (a HTTP return code) and 'error' (which has members 'message' and 'documentation_url'). */
    if (err && err.status) {
        /* 401 for authentication failure. */
        if (err.status == 401 || err.status == 404) {
            console.log('Error: Authorisation failure.');
        }
        /* 403 for rate limit exceeded, or many authentication failures. */
        else if (err.status == 403) {
            var time = err._jqXHR.getResponseHeader('X-RateLimit-Reset');
            if (time) {
                /* Rate limit exceeded. */
                var date = new Date(parseInt(time, 10) * 1000);
                console.log('Error: Rate limit exceeded, try again after ' + date.toTimeString() + '.');
            } else {
                /* Auth failure. */
                console.log('Error: Authorisation failure.');
            }
        } else {
            console.log('Error: Unknow, GitHub error message: ' + JSON.parse(err.error).message);
        }
    }
}

function submitPlugin(pluginName, comment) {
    console.log('Submitting ' + pluginName + ' with comment ' + comment);
    console.log('Searching for existing issue for ' + pluginName);
    gh.searchIssues(pluginName + ' in:title repo:' + repos[gameName].owner + '/' + repos[gameName].repo).then(function(issues){
        /* These issues may contain partial matches, so check returned issues. */
        for (var i = 0; i < issues.items.length; ++i) {
            if (issues.items[i].title.toLowerCase() === pluginName.toLowerCase()) {
                var issue = new Issue(repos[gameName].owner, repos[gameName].repo, issues.items[i].number);
                /* Check to make sure the proposed comment isn't a duplicate. */
                issue.getComments().then(function(comments){
                    for (var j = 0; j < comments.length; ++j) {
                        if (comments[j].body.toLowerCase() == comment.toLowerCase()) {
                            console.log('Skipped duplicate comment ' + data);
                            return;
                        }
                    }
                    issue.createComment(comment).then(function(data){
                        console.log('Created comment ' + data);
                    });
                });
                return;
            }
        }
        if (issues.total_count == 0) {
            console.log('No matching submissions.');
            /* No matching issues found. Create a new issue. */
            var repo = gh.getRepo(repos[gameName].owner, repos[gameName].repo);
            repo.createIssue(pluginName, {body: comment}).then(function(data){
                console.log('Created new issue ' + data);
            });
        }
    }).catch(handleError);
}

function processBugXML(xml) {
    var name = xml.children[0].textContent;
    var commentElems = xml.getElementsByTagName('thetext');

    var comments = [];
    for (var i = 0; i < commentElems.length; ++i) {
        comments.push(commentElems[i].textContent);
    }

    comments.reduce(function(sequence, comment) {
        return sequence.then(function(){
            submitPlugin(name, comment);
        });
    }, Promise.resolve());
}

function getXMLData() {
    var branch = gh.getRepo('boss-developers', 'bugzilla-data').getBranch();

    branch.contents(repos[gameName].xmlFile).then(function(contents){
        var parser = new DOMParser();
        var xmlDoc = parser.parseFromString(contents, 'text/xml');
        var bugs = xmlDoc.getElementsByTagName('bug');
        for (var i = 0; i < bugs.length; ++i) {
            processBugXML(bugs[i]);
        }
    }).catch(handleError);
}

getXMLData();